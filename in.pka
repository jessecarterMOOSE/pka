# Simple script that takes a atom id and velocity components from the command line and
# performs a PKA simulation. Interstitial and vacancy coordinates are also output.

# read some info from command line
variable end_time index 1.0  # how long (in ps) to run pka simulation for
variable Nx index 10
variable T index 300
variable int_cluster_cutoff index 3.2
variable vac_cluster_cutoff index 3.2
variable restart_dir index restart
variable potential_dir index potentials
variable thermostat_edge index 0
variable electronic_stopping index 0
variable electronic_stopping_file index None

# pka info
variable	pka_id index 1
variable	vx index 1.0
variable	vy index 1.0
variable	vz index 1.0

# start from equilibrated structure
read_restart	${restart_dir}/restart.equilibrate-T-${T}-Nx-${Nx}

# store original atom coords to get coords of vacancies, and interstitials to some extent
fix		cell_coords all store/state 0 x y z

# some stuff does not get stored in restart file
pair_style	eam/fs
pair_coeff	* * ${potential_dir}/Fe_2.eam.fs Fe
reset_timestep	0

# compute voronoi occuptation
compute		defects all voronoi/atom occupation

# count vacs and clusters, dump coords
variable	vac_sites atom c_defects[1]==0
group		vac_sites dynamic all every 100 var vac_sites
compute		num_vacs all reduce sum v_vac_sites
compute		vac_cluster vac_sites cluster/atom ${vac_cluster_cutoff}
compute		vac_cluster_id vac_sites chunk/atom c_vac_cluster compress yes
dump		vac_dump vac_sites custom 100 vacs/dump.vacs.*.txt id f_cell_coords[1] f_cell_coords[2] f_cell_coords[3] c_vac_cluster_id
dump_modify	vac_dump pad 6

# identify ints and clusters, dump coords, not counting them here
variable	int_atoms atom c_defects[2]>1
group		int_atoms dynamic all every 100 var int_atoms
compute		int_cluster int_atoms cluster/atom ${int_cluster_cutoff}
compute		int_cluster_id int_atoms chunk/atom c_int_cluster compress yes
dump		int_dump int_atoms custom 100 ints/dump.ints.*.txt id x y z c_int_cluster_id
dump_modify	int_dump pad 6

# check for wrapped atoms
compute int_image int_atoms property/atom ix iy iz
compute vac_image vac_sites property/atom ix iy iz
variable int_image_sumsq atom c_int_image[1]*c_int_image[1]+c_int_image[2]*c_int_image[2]+c_int_image[3]*c_int_image[3]
variable vac_image_sumsq atom c_vac_image[1]*c_vac_image[1]+c_vac_image[2]*c_vac_image[2]+c_vac_image[3]*c_vac_image[3]
compute total_int_image_sum int_atoms reduce sum v_int_image_sumsq
compute total_vac_image_sum vac_sites reduce sum v_vac_image_sumsq
variable wrap_flag equal c_total_int_image_sum+c_total_vac_image_sum

# find minimum separation distance between any and all atoms
compute propertylocal all property/local patom1 patom2
compute pairlocal all pair/local dist eng force
compute min_d all reduce min c_pairlocal[1]

# define outer region of box to possibly thermostat
variable edge equal 5.0
variable xleft equal xlo+${edge}
variable xright equal xhi-${edge}
variable yleft equal ylo+${edge}
variable yright equal yhi-${edge}
variable zleft equal zlo+${edge}
variable zright equal zhi-${edge}
region outer_edge block ${xleft} ${xright} ${yleft} ${yright} ${zleft} ${zright} units box side out
group outer_atoms region outer_edge
compute outer_temp outer_atoms temp
if "${thermostat_edge}==1" then "fix nvt_edge outer_atoms nvt temp $T $T $(100.0*dt)"

# cut timestep so no atoms move more than 1/100th of lattice constant in a step
fix		fix_dt all dt/reset 1 NULL 0.001 0.01 units lattice

# perform NVE time integration
fix		fix_nve all nve

# compute kinetic energy to make sure we set velocities correctly
compute		ke all ke/atom
compute		max_ke all reduce max c_ke

# output info
thermo		100
thermo_style	custom step time dt temp c_outer_temp press v_wrap_flag c_min_d c_max_ke c_num_vacs

# write some info to file
variable	time equal time  # is there a better way to get the time into the line
fix		output all ave/time 1 1 100 v_time c_thermo_temp c_outer_temp c_thermo_press c_num_vacs c_max_ke v_wrap_flag c_min_d file time-history.txt

# stop the drift drift every once in a while
fix momentum all momentum 100 linear 1 1 1

# optionally apply electronic stopping power
region all block INF INF INF INF INF INF
if "${electronic_stopping} == 1" then "fix elstopping all electron/stopping 10.0 ${electronic_stopping_file} region all"

# initialize system
run 0 post no

# dump initial coords for reference
write_dump     all custom all/dump.all.begin.txt id type mass x y z

# pka
group		pka id ${pka_id}
velocity	pka set ${vx} ${vy} ${vz} units box  # 587 A/ps is about 1 keV for Fe

# run until specified time
variable time equal time
print "* running until ${end_time} ps *"

label loop
variable a loop 1000
run 1000 pre no post no
if ${time}>${end_time} then "jump SELF break"
next a
jump SELF loop
label break
print "ALL DONE"

# when done, dump and write restart in case we want to pick things up again
write_dump     all custom all/dump.all.end.txt id type mass x y z c_vac_cluster_id c_int_cluster_id
write_restart  restart-file
